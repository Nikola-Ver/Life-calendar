[{"D:\\Programming\\My\\Node js\\work\\Life-calendar\\front\\src\\index.tsx":"1","D:\\Programming\\My\\Node js\\work\\Life-calendar\\front\\src\\reportWebVitals.ts":"2","D:\\Programming\\My\\Node js\\work\\Life-calendar\\front\\src\\components\\App\\App.tsx":"3","D:\\Programming\\My\\Node js\\work\\Life-calendar\\front\\src\\components\\Calendar\\Calendar.tsx":"4","D:\\Programming\\My\\Node js\\work\\Life-calendar\\front\\src\\components\\Switcher\\Switcher.tsx":"5"},{"size":303,"mtime":1611140084272,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1611126051167,"results":"8","hashOfConfig":"7"},{"size":564,"mtime":1611347114779,"results":"9","hashOfConfig":"7"},{"size":11535,"mtime":1611350938026,"results":"10","hashOfConfig":"7"},{"size":1228,"mtime":1611346569658,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"tj2s7k",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"D:\\Programming\\My\\Node js\\work\\Life-calendar\\front\\src\\index.tsx",[],["24","25"],"D:\\Programming\\My\\Node js\\work\\Life-calendar\\front\\src\\reportWebVitals.ts",[],"D:\\Programming\\My\\Node js\\work\\Life-calendar\\front\\src\\components\\App\\App.tsx",[],"D:\\Programming\\My\\Node js\\work\\Life-calendar\\front\\src\\components\\Calendar\\Calendar.tsx",["26"],"import './Calendar.css';\r\nimport Editor from '../Editor/Editor';\r\nimport { useState } from 'react';\r\n\r\ninterface CalendarProps {\r\n  viewType: number;\r\n  currentCell: any;\r\n  setCurrentCell: any\r\n}\r\n\r\ninterface Data {\r\n  items: Array<{\r\n    name: string,\r\n    value: string\r\n  }>,\r\n  countTasks: number,\r\n  date: {\r\n    day: number,\r\n    month: number,\r\n    year: number,\r\n  },\r\n  toDate: {\r\n    day: number,\r\n    month: number,\r\n    year: number,\r\n  }\r\n}\r\n\r\nlet flagFirstIn = true;\r\n\r\nconst Calendar: React.FC<CalendarProps> = (props) => {\r\n  // 0 - days, 1 - weeks, 2 - months\r\n  let [arrOfDoneTasks, setArrOfDoneTasks] = useState<Array<Array<Data>>>([[], [], []]);\r\n\r\n  if (\r\n    flagFirstIn &&\r\n    arrOfDoneTasks[0].length === 0 &&\r\n    arrOfDoneTasks[1].length === 0 &&\r\n    arrOfDoneTasks[2].length === 0\r\n  ) {\r\n    flagFirstIn = false;\r\n    fetch('./index.js',\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        }\r\n      }\r\n    )\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setArrOfDoneTasks(data);\r\n      });\r\n  }\r\n\r\n  // if (\r\n  //   arrOfDoneTasks[0].length === 0 && \r\n  //   arrOfDoneTasks[1].length === 0 && \r\n  //   arrOfDoneTasks[2].length === 0\r\n  // ) \r\n  // setArrOfDoneTasks([[\r\n  //     { items: [{name: \"Dad\",value: \"- invited me to fish with his friends and my godfather\"},{name: \"I\",value: \"- repeated JS & Node\\n- at 01:15 AM go to bed\\n- updated the FileWatcher program\\n- started writing a new React project in ts\\n- repeated hooks for react\\n- took a walk with my friends (Artem & Andrey)\\n- tried to install a program for Artem's dad (program to diagnostic audi with VOG wire)\\n- went to bed at 09:00 PM\\n- at 11:40 PM woke up\"},{name: \"Mood\",value: \" good\"}],countTasks: 10,date: {day: 17, month: 1, year: 2021}, toDate: {day: 17, month: 1, year: 2021} },\r\n  //     { items: [{name: 'Mood', value: ' awful'}], countTasks: 2, date: {day: 18, month: 1, year: 2021}, toDate: {day: 18, month: 1, year: 2021}},\r\n  //     { items: [{name: 'Mood', value: ' ideally'}], countTasks: 5, date: {day: 19, month: 1, year: 2021}, toDate: {day: 19, month: 1, year: 2021}},\r\n  //     { items: [{name: 'Mood', value: ' ideally'}], countTasks: 10, date: {day: 21, month: 1, year: 2021}, toDate: {day: 21, month: 1, year: 2021}},\r\n  //     { items: [{name: 'Mood', value: ' ideally'}], countTasks: 10, date: {day: 22, month: 1, year: 2021}, toDate: {day: 22, month: 1, year: 2021}},\r\n  //     { items: [{name: 'Mood', value: ' ideally'}], countTasks: 10, date: {day: 23, month: 1, year: 2021}, toDate: {day: 23, month: 1, year: 2021}},\r\n  //     { items: [{name: 'Mood', value: ' ideally'}], countTasks: 10, date: {day: 24, month: 1, year: 2021}, toDate: {day: 24, month: 1, year: 2021}},\r\n  //     { items: [{name: 'Mood', value: ' ideally'}], countTasks: 30, date: {day: 25, month: 1, year: 2021}, toDate: {day: 25, month: 1, year: 2021}},\r\n  //     { items: [{name: 'Mood', value: ' ideally'}], countTasks: 30, date: {day: 26, month: 1, year: 2021}, toDate: {day: 26, month: 1, year: 2021}},\r\n  // ],\r\n  // [\r\n  //     { items: [{name: \"Dad\",value: \"- invited me to fish with his friends and my godfather\"},{name: \"I\",value: \"- repeated JS & Node\\n- at 01:15 AM go to bed\\n- updated the FileWatcher program\\n- started writing a new React project in ts\\n- repeated hooks for react\\n- took a walk with my friends (Artem & Andrey)\\n- tried to install a program for Artem's dad (program to diagnostic audi with VOG wire)\\n- went to bed at 09:00 PM\\n- at 11:40 PM woke up\"},{name: \"Mood\",value: \" good\"}],countTasks: 10,date: {day: 17, month: 1, year: 2021}, toDate: {day: 24, month: 1, year: 2021} },\r\n  //     { items: [{name: 'Mood', value: ' awful'}], countTasks: 15, date: {day: 17, month: 1, year: 2021}, toDate: {day: 24, month: 1, year: 2021}},\r\n  // ],\r\n  // [\r\n  //     { items: [{name: 'Mood', value: ' ideally'}], countTasks: 15, date: {day: 17, month: 1, year: 2021}, toDate: {day: 17, month: 1, year: 2021}},\r\n  // ]]);\r\n\r\n  const arrOfElements: Array<any> = [];\r\n\r\n  arrOfDoneTasks[props.viewType].forEach((outElement, index) => {\r\n    let mood = 'normal';\r\n    outElement.items.forEach(innerElement => {\r\n      if (innerElement.name.toUpperCase() === 'MOOD') {\r\n        if (/ideally/gi.exec(innerElement.value)) mood = 'ideally';\r\n        if (/good/gi.exec(innerElement.value)) mood = 'good';\r\n        if (/normal/gi.exec(innerElement.value)) mood = 'normal';\r\n        if (/bad/gi.exec(innerElement.value)) mood = 'bad';\r\n        if (/awful/gi.exec(innerElement.value)) mood = 'awful';\r\n      }\r\n    });\r\n\r\n    const classAndMood = `Calendar-cell ${mood}`;\r\n\r\n    function saveAndExitFromCell(index: number, viewType: number): void {\r\n      if (viewType === 0) {\r\n        const calendar = document.getElementsByClassName('Calendar-cell-info-content')[0];\r\n        const titles: any = calendar.getElementsByClassName('Calendar-cell-info-content-title');\r\n        const texts: any = calendar.getElementsByClassName('Calendar-cell-info-content-text');\r\n        let items: any = [];\r\n        for (let i = 0; i < titles.length; i++)\r\n          items.push({ name: titles[i].innerText, value: texts[i].innerText });\r\n        arrOfDoneTasks[0][index].items.forEach(e => {\r\n          if (e.name.toUpperCase() === 'MOOD') {\r\n            items.push(e);\r\n          }\r\n        });\r\n        let newArrOfDoneTasks = arrOfDoneTasks;\r\n        newArrOfDoneTasks[0][index].items = items;\r\n        const timeDiv = document.getElementById('time');\r\n        const timeText = timeDiv?.innerText;\r\n        if (timeText) {\r\n          const dateFromText = new Date(timeText);\r\n          if (dateFromText.toString() !== 'Invalid Date') {\r\n            newArrOfDoneTasks[0][index].toDate.day = dateFromText.getDate();\r\n            newArrOfDoneTasks[0][index].toDate.month = dateFromText.getMonth() + 1;\r\n            newArrOfDoneTasks[0][index].toDate.year = dateFromText.getFullYear();\r\n          }\r\n        }\r\n\r\n        fetch('./index.js', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            type: \"EDIT\",\r\n            file: `${newArrOfDoneTasks[0][index].date.day < 10 ?\r\n              `0${newArrOfDoneTasks[0][index].date.day.toString()}` :\r\n              newArrOfDoneTasks[0][index].date.day}.${newArrOfDoneTasks[0][index].date.month < 10 ?\r\n                `0${newArrOfDoneTasks[0][index].date.month.toString()}` :\r\n                newArrOfDoneTasks[0][index].date.month}.${newArrOfDoneTasks[0][index].date.year}.txt`,// \"25.25.2021.txt\",\r\n            index,\r\n            item: JSON.stringify(newArrOfDoneTasks[0][index])\r\n          })\r\n        }).then(() => {\r\n          fetch('./index.js',\r\n            {\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n              }\r\n            }\r\n          )\r\n            .then((response) => {\r\n              return response.json();\r\n            })\r\n            .then((data) => {\r\n              setArrOfDoneTasks(data);\r\n            });\r\n        });\r\n      }\r\n\r\n      props.setCurrentCell(null);\r\n    }\r\n\r\n    function deleteAndExitFromCell(index: number): void {\r\n      let newArrOfDoneTasks = arrOfDoneTasks;\r\n\r\n      fetch('./index.js', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          type: \"DELETE\",\r\n          file: `${newArrOfDoneTasks[0][index].date.day < 10 ?\r\n            `0${newArrOfDoneTasks[0][index].date.day.toString()}` :\r\n            newArrOfDoneTasks[0][index].date.day}.${newArrOfDoneTasks[0][index].date.month < 10 ?\r\n              `0${newArrOfDoneTasks[0][index].date.month.toString()}` :\r\n              newArrOfDoneTasks[0][index].date.month}.${newArrOfDoneTasks[0][index].date.year}.txt`,// \"25.25.2021.txt\",\r\n          index,\r\n          item: null\r\n        })\r\n      }).then(() => {\r\n        return newArrOfDoneTasks[0].splice(index, 1);\r\n      }).then(() => {\r\n        fetch('./index.js',\r\n          {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json'\r\n            }\r\n          }\r\n        )\r\n          .then((response) => {\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            setArrOfDoneTasks(data);\r\n            return;\r\n          });\r\n      });\r\n\r\n      props.setCurrentCell(null);\r\n    }\r\n\r\n    function getCellInfo(index: number): void {\r\n      let viewComponents: any = [];\r\n      let contentTitle = 'Calendar-cell-info-content-title';\r\n      let contentText = 'Calendar-cell-info-content-text Editable';\r\n      if (props.viewType === 0) {\r\n        contentTitle += ' Editable';\r\n      }\r\n      arrOfDoneTasks[props.viewType][index].items.forEach(e => {\r\n        if (e.name.toUpperCase() !== 'MOOD')\r\n          viewComponents.push(\r\n            <>\r\n              <div className={contentTitle}>\r\n                {e.name}\r\n              </div>\r\n              <div className={contentText}>\r\n                {e.value}\r\n              </div>\r\n            </>\r\n          );\r\n      });\r\n\r\n      let deleteButton = <div className=\"Editor-delete\" onClick={() => { deleteAndExitFromCell(index) }}></div>;\r\n      if (props.viewType !== 0) deleteButton = <></>;\r\n\r\n      let date = arrOfDoneTasks[props.viewType][index].date;\r\n      let toDate = arrOfDoneTasks[props.viewType][index].toDate;\r\n      let dateToday = <h1 id=\"time\" className=\"App-title\">{new Date(`${date.month}.${date.day}.${date.year}`).toDateString()}</h1>;\r\n      if (date.month !== toDate.month || date.day !== toDate.day || date.year !== toDate.year) {\r\n        dateToday = \r\n          <h1 className=\"App-title-two\">\r\n            {new Date(`${date.month}.${date.day}.${date.year}`).toDateString()}<br />\r\n            {new Date(`${toDate.month}.${toDate.day}.${toDate.year}`).toDateString()}\r\n          </h1>;\r\n      }\r\n      \r\n      props.setCurrentCell(\r\n        <>\r\n          { dateToday }\r\n          <div className=\"Calendar-cell-info\">\r\n            <div className=\"Calendar-cell-info-close\" onClick={() => { saveAndExitFromCell(index, props.viewType) }}></div>\r\n            <div className=\"Calendar-cell-info-content\">{viewComponents}</div>\r\n            {deleteButton}\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n\r\n    arrOfElements.push(\r\n      <div\r\n        className={classAndMood}\r\n        title={`${outElement.date.day}.${outElement.date.month}.${outElement.date.year} - ` +\r\n          `${outElement.toDate.day}.${outElement.toDate.month}.${outElement.toDate.year}`}\r\n        key={index}\r\n        onClick={() => { getCellInfo(index) }}\r\n      >\r\n        <p className=\"Calendar-cell-text\">{outElement.countTasks}</p>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  let view = props.viewType === 0 ? props.currentCell ?\r\n    <>\r\n      { props.currentCell}\r\n    </> :\r\n    <>\r\n      <h1 className=\"App-title\">{new Date().toDateString()}</h1>\r\n      <div className=\"Calendar\">{arrOfElements}</div>\r\n      <div className=\"Editor-add-new\"></div>\r\n    </> : props.currentCell ? props.currentCell :\r\n      <>\r\n        <h1 className=\"App-title\">{new Date().toDateString()}</h1>\r\n        <div className=\"Calendar\">{arrOfElements}</div>\r\n      </>;\r\n\r\n  return <>{view}</>;\r\n}\r\n\r\nexport default Calendar;","D:\\Programming\\My\\Node js\\work\\Life-calendar\\front\\src\\components\\Switcher\\Switcher.tsx",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":2,"column":8,"nodeType":"33","messageId":"34","endLine":2,"endColumn":14},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"@typescript-eslint/no-unused-vars","'Editor' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]